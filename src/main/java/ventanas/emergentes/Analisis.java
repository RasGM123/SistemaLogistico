/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ventanas.emergentes;

import Modelo.*;
import com.toedter.calendar.JDateChooser;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Iterator;
import java.util.Map;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Rodrigo
 */
public class Analisis extends javax.swing.JInternalFrame {

    private Sistema sis;

    /**
     * Creates new form Analisis
     *
     * @param s
     */
    public Analisis(Sistema s) {
        initComponents();
        Icon icon = new javax.swing.ImageIcon(System.getProperty("user.dir") + "\\src\\main\\java\\imagenes\\minicon\\grafico-histograma.png");
        setFrameIcon(icon);
        this.sis = s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        op1 = new javax.swing.JRadioButton();
        op2 = new javax.swing.JRadioButton();
        op3 = new javax.swing.JRadioButton();
        op4 = new javax.swing.JRadioButton();
        op5 = new javax.swing.JRadioButton();
        Generar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        info = new javax.swing.JTextArea();
        Salir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Análisis");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selecciona una opción:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        buttonGroup1.add(op1);
        op1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        op1.setText("Cantidad de usuarios");

        buttonGroup1.add(op2);
        op2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        op2.setText("Promedio de Pedidos");

        buttonGroup1.add(op3);
        op3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        op3.setText("Número de veces que pidieron un Producto");

        buttonGroup1.add(op4);
        op4.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        op4.setText("Cantidad de entregas Comprometidas");

        buttonGroup1.add(op5);
        op5.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        op5.setText("Promedio de entregas");

        Generar.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Generar.setText("Generar");
        Generar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Generar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(op1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(op2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(op3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(op4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(op5)
                        .addGap(18, 18, 18)
                        .addComponent(Generar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(op1)
                    .addComponent(op2)
                    .addComponent(op3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(op4)
                    .addComponent(op5)
                    .addComponent(Generar))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informe:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        info.setEditable(false);
        info.setBackground(new java.awt.Color(255, 255, 255));
        info.setColumns(20);
        info.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        info.setRows(5);
        info.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jScrollPane1.setViewportView(info);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addContainerGap())
        );

        Salir.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Salir.setText("Salir");
        Salir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Salir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Salir)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        dispose();
    }//GEN-LAST:event_SalirActionPerformed

    private void GenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarActionPerformed
        if (op1.isSelected()) {
            cantidadclientes();
        } else if (op2.isSelected()) {
            promedioPedidos();
        } else if (op3.isSelected()) {
            pedidomasAclamado();
        } else if (op4.isSelected()) {
            entegasComprendidas();
        } else if (op5.isSelected()) {
            PromedioEntregas();
        }
    }//GEN-LAST:event_GenerarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generar;
    private javax.swing.JButton Salir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea info;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton op1;
    private javax.swing.JRadioButton op2;
    private javax.swing.JRadioButton op3;
    private javax.swing.JRadioButton op4;
    private javax.swing.JRadioButton op5;
    // End of variables declaration//GEN-END:variables

    private void cantidadclientes() {
        try {
            info.setText("");
            Usuario us = sis.obtenerSesion();
            if (us instanceof Gerente g) {
                LocalDate[] fechas = obtenerFechas();
                int c = g.contarClientesRegistrados(fechas[0], fechas[1]);
                String men = "Cantidad de usuarios entre " + fechas[0].toString() + " y " + fechas[1].toString() +"\n"
                        + "Cantidad usuarios total: " + Integer.toString(c);
                info.append(men);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void promedioPedidos() {
        try {
            Usuario us = sis.obtenerSesion();
            if (us instanceof Gerente g) {
                LocalDate[] fechas = obtenerFechas();
                double d = g.calcularPromedioPedidos(fechas[0], fechas[1]);
                String men = "Promedio de pedidos entre " + fechas[0].toString() + " y " + fechas[1].toString() + "\n"
                        + "Total: " + Double.toString(d);
                info.append(men);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void pedidosmasAclamado() {
        try {
            Usuario us = sis.obtenerSesion();
            if (us instanceof Gerente g) {
                LocalDate[] fechas = obtenerFechas();
                int cont = 0;
                Map<Producto, Integer> datos = g.listarProductosPorPedidos(fechas[0], fechas[1]);
                String infos = "Lista de pedidos entre " + fechas[0].toString() + " y " + fechas[1].toString() +"\n";
                info.append(infos);
                for (Producto p : datos.keySet()) {
                    int ca = datos.get(p);
                    String men = "Producto: " + p.getNombre() + " Cantidad: " + Integer.toString(ca) + "\n";
                    info.append(men);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void entegasComprendidas() {
        try {
            Usuario us = sis.obtenerSesion();
            if (us instanceof Gerente g) {
                LocalDate[] fechas = obtenerFechas();
                int cont = 0;
                Map<Transportista, Integer> datos = g.listarTransportistasPorEntregas(fechas[0], fechas[1]);
                String infos = "Lista de pedidos comprendidas entre " + fechas[0].toString() + " y " + fechas[1].toString() +"\n";
                info.append(infos);
                for (Transportista p : datos.keySet()) {
                    int ca = datos.get(p);
                    String men = "Transportista: " + p.getNombres() + " " + p.getApellidos() + " Cantidad de entregas: " + Integer.toString(ca) + "\n";
                    info.append(men);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void PromedioEntregas() {
        try {
            Usuario us = sis.obtenerSesion();
            if (us instanceof Gerente g) {
                LocalDate[] fechas = obtenerFechas();
                int cont = 0;
                Map<Proveedor, Float> datos = g.listarProveedoresPorTiempoDeEntrega(fechas[0], fechas[1]);
                String infos = "Pomedio de entregas del proveedores desde " + fechas[0].toString() + " y " + fechas[1].toString() + "\n";
                info.append(infos);
                for (Proveedor p : datos.keySet()) {
                    float ca = datos.get(p);
                    String men = "Proveedor: " + p.getNombre() + " tiempo promedio: " + Float.toString(ca) + "\n";
                    info.append(men);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private LocalDate[] obtenerFechas() {
    JDateChooser dateChooser1 = new JDateChooser();
    JDateChooser dateChooser2 = new JDateChooser();
    Object[] params = {"Fecha Inicio:", dateChooser1, "Fecha Fin:", dateChooser2};
    int option = JOptionPane.showConfirmDialog(null, params, "Seleccionar fechas", JOptionPane.OK_CANCEL_OPTION);
    if (option == JOptionPane.OK_OPTION) {
        LocalDate fechaInicio = dateChooser1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate fechaFin = dateChooser2.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        return new LocalDate[]{fechaInicio, fechaFin};
    } else {
        return new LocalDate[]{null, null}; // Manejar el caso en que el usuario cancele la selección
    }
}

    private void pedidomasAclamado() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
